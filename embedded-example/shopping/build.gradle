plugins {
    id 'application'
    id "com.google.cloud.tools.jib" version "$jibVersion"
    id "org.jetbrains.kotlin.plugin.serialization" version "$kotlinVersion"
}

apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: "kotlin-kapt"

archivesBaseName = 'statefun-shopping'
mainClassName = 'shopping.Harness'
//mainClassName = 'org.apache.flink.statefun.flink.core.StatefulFunctionsJob'
sourceCompatibility = 1.11
targetCompatibility = 1.11

configurations {
    provided
    statefunLib

    localCompileClasspath.extendsFrom compileClasspath
    localRuntimeClasspath.extendsFrom runtimeClasspath

    implementation.exclude group: 'org.apache.commons'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:$serializationVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serializationVersion"

    implementation project(':protocols')
    implementation "de.vandermeer:asciitable:0.3.2"

    provided "com.google.protobuf:protobuf-java:$protobufVersion"
    provided "com.google.protobuf:protobuf-java-util:$protobufVersion"
    provided "org.apache.flink:statefun-sdk-java:$statefunVersion"
    provided "org.apache.flink:statefun-flink-harness:$statefunVersion"

    provided "org.apache.logging.log4j:log4j-slf4j-impl:2.13.3"
    provided "org.slf4j:slf4j-api:1.7.28"

    compileOnly "com.google.auto.service:auto-service-annotations:1.0-rc6"
    kapt "com.google.auto.service:auto-service:1.0-rc6"

    statefunLib "org.apache.flink:statefun-flink-distribution:$statefunVersion"
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided

    local {
        compileClasspath += configurations.provided
        runtimeClasspath += main.output
        runtimeClasspath += configurations.provided
    }
}

run {
    applicationDefaultJvmArgs = [
        "-Dlog4j2.configurationFile=log4j2.properties",
    ]
    classpath = sourceSets.local.runtimeClasspath
}

jib {
    from.image = "flink:${flinkVersion}-java11"
    to.image = "statefun-shopping"

    containerizingMode = 'packaged'
    container {
        creationTime = 'USE_CURRENT_TIMESTAMP'
        entrypoint = 'INHERIT'
        appRoot = '/opt/flink/usrlib'
    }

    extraDirectories {
        paths {
            path {
                from = file("${buildDir}/statefun-distribution")
                into = '/opt/flink/usrlib/libs/'
            }
        }
    }
}

task copyStatefunLibs(type: Copy) {
    from configurations.statefunLib
    into "${buildDir}/statefun-distribution"
    include("statefun-flink-distribution*")
}

//tasks.jib.dependsOn copyStatefunLibs
tasks.jibDockerBuild.dependsOn copyStatefunLibs
